{"filter":false,"title":"hashmap.hpp","tooltip":"/hashmap.hpp","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":10,"column":7},"end":{"row":10,"column":8},"action":"insert","lines":["A"],"id":41}],[{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"insert","lines":["S"],"id":42}],[{"start":{"row":10,"column":9},"end":{"row":10,"column":10},"action":"insert","lines":["H"],"id":43}],[{"start":{"row":10,"column":9},"end":{"row":10,"column":10},"action":"remove","lines":["H"],"id":44}],[{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"remove","lines":["S"],"id":45}],[{"start":{"row":10,"column":7},"end":{"row":10,"column":8},"action":"remove","lines":["A"],"id":46}],[{"start":{"row":10,"column":6},"end":{"row":10,"column":7},"action":"remove","lines":["h"],"id":47}],[{"start":{"row":10,"column":6},"end":{"row":10,"column":7},"action":"insert","lines":["H"],"id":48}],[{"start":{"row":10,"column":7},"end":{"row":10,"column":8},"action":"insert","lines":["a"],"id":49}],[{"start":{"row":10,"column":8},"end":{"row":10,"column":9},"action":"insert","lines":["s"],"id":50}],[{"start":{"row":10,"column":9},"end":{"row":10,"column":10},"action":"insert","lines":["h"],"id":51}],[{"start":{"row":10,"column":10},"end":{"row":10,"column":11},"action":"insert","lines":["M"],"id":52}],[{"start":{"row":10,"column":10},"end":{"row":10,"column":11},"action":"remove","lines":["M"],"id":53}],[{"start":{"row":10,"column":10},"end":{"row":10,"column":11},"action":"insert","lines":["m"],"id":54}],[{"start":{"row":10,"column":11},"end":{"row":10,"column":12},"action":"insert","lines":["a"],"id":55}],[{"start":{"row":10,"column":12},"end":{"row":10,"column":13},"action":"insert","lines":["p"],"id":56}],[{"start":{"row":10,"column":13},"end":{"row":10,"column":14},"action":"remove","lines":[" "],"id":57}],[{"start":{"row":14,"column":21},"end":{"row":14,"column":22},"action":"remove","lines":["d"],"id":58}],[{"start":{"row":14,"column":20},"end":{"row":14,"column":21},"action":"remove","lines":["i"],"id":59}],[{"start":{"row":14,"column":19},"end":{"row":14,"column":20},"action":"remove","lines":["o"],"id":60}],[{"start":{"row":14,"column":18},"end":{"row":14,"column":19},"action":"remove","lines":["v"],"id":61}],[{"start":{"row":14,"column":18},"end":{"row":14,"column":19},"action":"insert","lines":["u"],"id":62}],[{"start":{"row":14,"column":19},"end":{"row":14,"column":20},"action":"insert","lines":["n"],"id":63}],[{"start":{"row":14,"column":20},"end":{"row":14,"column":21},"action":"insert","lines":["s"],"id":64}],[{"start":{"row":14,"column":21},"end":{"row":14,"column":22},"action":"insert","lines":["i"],"id":65}],[{"start":{"row":14,"column":22},"end":{"row":14,"column":23},"action":"insert","lines":["g"],"id":66}],[{"start":{"row":14,"column":23},"end":{"row":14,"column":24},"action":"insert","lines":["n"],"id":67}],[{"start":{"row":14,"column":24},"end":{"row":14,"column":25},"action":"insert","lines":["e"],"id":68}],[{"start":{"row":14,"column":25},"end":{"row":14,"column":26},"action":"insert","lines":["d"],"id":69}],[{"start":{"row":14,"column":26},"end":{"row":14,"column":27},"action":"insert","lines":[" "],"id":70}],[{"start":{"row":14,"column":27},"end":{"row":14,"column":28},"action":"insert","lines":["i"],"id":71}],[{"start":{"row":14,"column":28},"end":{"row":14,"column":29},"action":"insert","lines":["n"],"id":72}],[{"start":{"row":14,"column":29},"end":{"row":14,"column":30},"action":"insert","lines":["t"],"id":73}],[{"start":{"row":14,"column":30},"end":{"row":14,"column":31},"action":"insert","lines":[" "],"id":74}],[{"start":{"row":14,"column":31},"end":{"row":14,"column":32},"action":"insert","lines":["s"],"id":75}],[{"start":{"row":14,"column":32},"end":{"row":14,"column":33},"action":"insert","lines":["i"],"id":76}],[{"start":{"row":14,"column":33},"end":{"row":14,"column":34},"action":"insert","lines":["z"],"id":77}],[{"start":{"row":14,"column":34},"end":{"row":14,"column":35},"action":"insert","lines":["e"],"id":78}],[{"start":{"row":14,"column":8},"end":{"row":14,"column":17},"action":"remove","lines":["Readercom"],"id":79},{"start":{"row":14,"column":8},"end":{"row":14,"column":15},"action":"insert","lines":["Hashmap"]}],[{"start":{"row":17,"column":9},"end":{"row":17,"column":18},"action":"remove","lines":["Readercom"],"id":80},{"start":{"row":17,"column":9},"end":{"row":17,"column":16},"action":"insert","lines":["Hashmap"]}],[{"start":{"row":17,"column":23},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":81},{"start":{"row":18,"column":0},"end":{"row":18,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":18,"column":8},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":82},{"start":{"row":19,"column":0},"end":{"row":19,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":19,"column":8},"end":{"row":19,"column":9},"action":"insert","lines":["/"],"id":83}],[{"start":{"row":19,"column":9},"end":{"row":19,"column":10},"action":"insert","lines":["/"],"id":84}],[{"start":{"row":19,"column":10},"end":{"row":20,"column":0},"action":"insert","lines":["",""],"id":85},{"start":{"row":20,"column":0},"end":{"row":20,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":20,"column":8},"end":{"row":20,"column":30},"action":"insert","lines":["boolean set(key, value"],"id":86}],[{"start":{"row":20,"column":30},"end":{"row":20,"column":31},"action":"insert","lines":[")"],"id":87}],[{"start":{"row":20,"column":31},"end":{"row":20,"column":32},"action":"insert","lines":[";"],"id":88}],[{"start":{"row":20,"column":32},"end":{"row":21,"column":0},"action":"insert","lines":["",""],"id":89},{"start":{"row":21,"column":0},"end":{"row":21,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":21,"column":8},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":90},{"start":{"row":22,"column":0},"end":{"row":22,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":19,"column":10},"end":{"row":19,"column":11},"action":"insert","lines":["s"],"id":91}],[{"start":{"row":19,"column":11},"end":{"row":19,"column":12},"action":"insert","lines":["e"],"id":92}],[{"start":{"row":19,"column":12},"end":{"row":19,"column":13},"action":"insert","lines":["t"],"id":93}],[{"start":{"row":19,"column":8},"end":{"row":20,"column":32},"action":"remove","lines":["//set","        boolean set(key, value);"],"id":94},{"start":{"row":19,"column":8},"end":{"row":22,"column":212},"action":"insert","lines":["boolean set(key, value): stores the given key/value pair in the hash map. Returns a boolean value indicating success / failure of the operation.","get(key): return the value associated with the given key, or null if no value is set.","delete(key): delete the value associated with the given key, returning the value on success or null if the key has no value.","float load(): return a float value representing the load factor (`(items in hash map)/(size of hash map)`) of the data structure. Since the size of the dat structure is fixed, this should never be greater than 1."]}],[{"start":{"row":20,"column":0},"end":{"row":20,"column":4},"action":"insert","lines":["    "],"id":95}],[{"start":{"row":20,"column":4},"end":{"row":20,"column":8},"action":"insert","lines":["    "],"id":96}],[{"start":{"row":21,"column":0},"end":{"row":21,"column":4},"action":"insert","lines":["    "],"id":97}],[{"start":{"row":21,"column":4},"end":{"row":21,"column":8},"action":"insert","lines":["    "],"id":98}],[{"start":{"row":22,"column":0},"end":{"row":22,"column":4},"action":"insert","lines":["    "],"id":99}],[{"start":{"row":22,"column":4},"end":{"row":22,"column":8},"action":"insert","lines":["    "],"id":100}],[{"start":{"row":19,"column":31},"end":{"row":19,"column":152},"action":"remove","lines":[": stores the given key/value pair in the hash map. Returns a boolean value indicating success / failure of the operation."],"id":101}],[{"start":{"row":18,"column":8},"end":{"row":19,"column":0},"action":"insert","lines":["",""],"id":102},{"start":{"row":19,"column":0},"end":{"row":19,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":19,"column":8},"end":{"row":19,"column":9},"action":"insert","lines":["/"],"id":103}],[{"start":{"row":19,"column":9},"end":{"row":19,"column":10},"action":"insert","lines":["/"],"id":104}],[{"start":{"row":19,"column":10},"end":{"row":19,"column":131},"action":"insert","lines":[": stores the given key/value pair in the hash map. Returns a boolean value indicating success / failure of the operation."],"id":105}],[{"start":{"row":20,"column":31},"end":{"row":20,"column":32},"action":"insert","lines":[";"],"id":106}],[{"start":{"row":21,"column":16},"end":{"row":21,"column":93},"action":"remove","lines":[": return the value associated with the given key, or null if no value is set."],"id":107}],[{"start":{"row":21,"column":16},"end":{"row":21,"column":17},"action":"insert","lines":[";"],"id":108}],[{"start":{"row":21,"column":8},"end":{"row":22,"column":0},"action":"insert","lines":["",""],"id":109},{"start":{"row":22,"column":0},"end":{"row":22,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":22,"column":8},"end":{"row":23,"column":0},"action":"insert","lines":["",""],"id":110},{"start":{"row":23,"column":0},"end":{"row":23,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":22,"column":8},"end":{"row":22,"column":85},"action":"insert","lines":[": return the value associated with the given key, or null if no value is set."],"id":111}],[{"start":{"row":22,"column":8},"end":{"row":22,"column":10},"action":"remove","lines":[": "],"id":112},{"start":{"row":22,"column":8},"end":{"row":22,"column":9},"action":"insert","lines":["/"]}],[{"start":{"row":22,"column":9},"end":{"row":22,"column":10},"action":"insert","lines":["/"],"id":113}],[{"start":{"row":23,"column":8},"end":{"row":23,"column":9},"action":"insert","lines":["i"],"id":114}],[{"start":{"row":23,"column":9},"end":{"row":23,"column":10},"action":"insert","lines":["n"],"id":115}],[{"start":{"row":23,"column":10},"end":{"row":23,"column":11},"action":"insert","lines":["t"],"id":116}],[{"start":{"row":23,"column":11},"end":{"row":23,"column":12},"action":"insert","lines":[" "],"id":117}],[{"start":{"row":24,"column":19},"end":{"row":24,"column":132},"action":"remove","lines":[": delete the value associated with the given key, returning the value on success or null if the key has no value."],"id":118}],[{"start":{"row":16,"column":10},"end":{"row":16,"column":22},"action":"remove","lines":["deconstuctor"],"id":119},{"start":{"row":16,"column":10},"end":{"row":16,"column":123},"action":"insert","lines":[": delete the value associated with the given key, returning the value on success or null if the key has no value."]}],[{"start":{"row":16,"column":11},"end":{"row":16,"column":12},"action":"remove","lines":[" "],"id":120}],[{"start":{"row":16,"column":10},"end":{"row":16,"column":11},"action":"remove","lines":[":"],"id":121}],[{"start":{"row":24,"column":0},"end":{"row":24,"column":19},"action":"remove","lines":["        delete(key)"],"id":122}],[{"start":{"row":25,"column":20},"end":{"row":25,"column":220},"action":"remove","lines":[": return a float value representing the load factor (`(items in hash map)/(size of hash map)`) of the data structure. Since the size of the dat structure is fixed, this should never be greater than 1."],"id":123}],[{"start":{"row":25,"column":20},"end":{"row":25,"column":21},"action":"insert","lines":[";"],"id":124}],[{"start":{"row":24,"column":0},"end":{"row":25,"column":0},"action":"insert","lines":["",""],"id":125}],[{"start":{"row":25,"column":0},"end":{"row":25,"column":4},"action":"insert","lines":["    "],"id":126}],[{"start":{"row":25,"column":4},"end":{"row":25,"column":8},"action":"insert","lines":["    "],"id":127}],[{"start":{"row":25,"column":8},"end":{"row":25,"column":9},"action":"insert","lines":["/"],"id":128}],[{"start":{"row":25,"column":9},"end":{"row":25,"column":10},"action":"insert","lines":["/"],"id":129}],[{"start":{"row":25,"column":10},"end":{"row":25,"column":210},"action":"insert","lines":[": return a float value representing the load factor (`(items in hash map)/(size of hash map)`) of the data structure. Since the size of the dat structure is fixed, this should never be greater than 1."],"id":130}],[{"start":{"row":25,"column":10},"end":{"row":25,"column":12},"action":"remove","lines":[": "],"id":131}],[{"start":{"row":25,"column":103},"end":{"row":26,"column":0},"action":"insert","lines":["",""],"id":132},{"start":{"row":26,"column":0},"end":{"row":26,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":26,"column":8},"end":{"row":26,"column":9},"action":"insert","lines":["/"],"id":133}],[{"start":{"row":26,"column":9},"end":{"row":26,"column":10},"action":"insert","lines":["/"],"id":134}],[{"start":{"row":29,"column":1},"end":{"row":29,"column":2},"action":"remove","lines":[" "],"id":135}],[{"start":{"row":29,"column":0},"end":{"row":29,"column":1},"action":"remove","lines":[" "],"id":136}],[{"start":{"row":28,"column":8},"end":{"row":29,"column":6},"action":"remove","lines":["","      "],"id":137}],[{"start":{"row":28,"column":4},"end":{"row":28,"column":8},"action":"remove","lines":["    "],"id":138}],[{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"remove","lines":["    "],"id":139}],[{"start":{"row":27,"column":21},"end":{"row":28,"column":0},"action":"remove","lines":["",""],"id":140}],[{"start":{"row":0,"column":0},"end":{"row":30,"column":0},"action":"remove","lines":["#ifndef HASHMAP_H","#define HASHMAP_H","using namespace std;","","//forward declaration","template<class ItemType>","class Fnode;","","//class data","template<class ItemType>","class Hashmap{","    ","    public:    ","        //constructor","        Hashmap(unsigned int size);","        ","        //delete the value associated with the given key, returning the value on success or null if the key has no value.","        ~Hashmap(void);","        ","        //: stores the given key/value pair in the hash map. Returns a boolean value indicating success / failure of the operation.","        boolean set(key, value);","        ","        //return the value associated with the given key, or null if no value is set.","        int get(key);","","        //return a float value representing the load factor (`(items in hash map)/(size of hash map)`) ","        //of the data structure. Since the size of the dat structure is fixed, this should never be greater than 1.","        float load();","};","#endif",""],"id":141},{"start":{"row":0,"column":0},"end":{"row":145,"column":6},"action":"insert","lines":["#ifndef _HASHMAP_H_","#define _HASHMAP_H_","","","","template<class Key, class Value>","class HashNode","{","public:","    Key    _key;","    Value  _value;","    HashNode *next;","","    HashNode(Key key, Value value)","    {","        _key = key;","        _value = value;","        next = NULL;","    }","    ~HashNode()","    {","","    }","    HashNode& operator=(const HashNode& node)","    {","        key = node.key;","        value = node.key;","        next = node.next;","        return *this;","    }","};","","template <class Key, class Value, class HashFunc, class EqualKey>","class HashMap","{","public:","    HashMap(int size);","    ~HashMap();","    bool insert(const Key& key, const Value& value);","    bool del(const Key& key);","    Value& find(const Key& key);","    Value& operator [](const Key& key);","","private:","    HashFunc hash;","    EqualKey equal;","    HashNode<Key, Value> **table;","    unsigned int _size;","    Value ValueNULL;","};","","","template <class Key, class Value, class HashFunc, class EqualKey>","HashMap<Key, Value, HashFunc, EqualKey>::HashMap(int size) : _size(size)","{","    hash = HashFunc();","    equal = EqualKey();","    table = new HashNode<Key, Value>*[_size];","    for (unsigned i = 0; i < _size; i++)","        table[i] = NULL;","}","","","","template <class Key, class Value, class HashFunc, class EqualKey>","HashMap<Key, Value, HashFunc, EqualKey>::~HashMap()","{","    for (unsigned i = 0; i < _size; i++)","    {","        HashNode<Key, Value> *currentNode = table[i];","        while (currentNode)","        {","            HashNode<Key, Value> *temp = currentNode;","            currentNode = currentNode->next;","            delete temp;","        }","    }","    delete table;","}","","","template <class Key, class Value, class HashFunc, class EqualKey>","bool HashMap<Key, Value, HashFunc, EqualKey>::insert(const Key& key, const Value& value)","{","    int index = hash(key)%_size;","    HashNode<Key, Value> * node = new HashNode<Key, Value>(key,value);","    node->next = table[index];","    table[index] = node;","    return true;","}","","","template <class Key, class Value, class HashFunc, class EqualKey>","bool HashMap<Key, Value, HashFunc, EqualKey>::del(const Key& key)","{","    unsigned index = hash(key) % _size;","    HashNode<Key, Value> * node = table[index];","    HashNode<Key, Value> * prev = NULL;","    while (node)","    {","        if (node->_key == key)","        {","            if (prev == NULL)","            {","                table[index] = node->next;","            }","            else","            {","                prev->next = node->next;","            }","            delete node;","            return true;","        }","        prev = node;","        node = node->next;","    }","    return false;","}","","template <class Key, class Value, class HashFunc, class EqualKey>","Value& HashMap<Key, Value, HashFunc, EqualKey>::find(const Key& key)","{","    unsigned  index = hash(key) % _size;","    if (table[index] == NULL)","        return ValueNULL;","    else","    {","        HashNode<Key, Value> * node = table[index];","        while (node)","        {","            if (node->_key == key)","                return node->_value;","            node = node->next;","        }","    }","}","","","template <class Key, class Value, class HashFunc, class EqualKey>","Value& HashMap<Key, Value, HashFunc, EqualKey>::operator [](const Key& key)","{","    return find(key);","}","","","#endif"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":52,"column":24},"end":{"row":52,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1506560446971,"hash":"1cdbfe8b8089cd01336e4020487693e475d923e1"}